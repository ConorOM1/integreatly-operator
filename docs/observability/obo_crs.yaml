---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rhoam-prometheus-ext
rules:
  - verbs:
      - create
    apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
  - verbs:
      - create
    apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
  - verbs:
      - get
    apiGroups:
      - ''
    resources:
      - configmaps
      - namespaces
  - verbs:
      - get
    nonResourceURLs:
      - /metrics
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rhoam-prometheus-ext
subjects:
  - kind: ServiceAccount
    name: rhoam-prometheus
    namespace: redhat-rhoam-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rhoam-prometheus-ext
---
kind: Secret
apiVersion: v1
metadata:
  name: rhoam-prometheus-additional-scrape-configs
  namespace: redhat-rhoam-operator
data:
  self-scrape-config: >-
    Ci0gam9iX25hbWU6IG9wZW5zaGlmdC1tb25pdG9yaW5nLWZlZGVyYXRpb24KICBob25vcl9sYWJlbHM6IHRydWUKICBrdWJlcm5ldGVzX3NkX2NvbmZpZ3M6CiAgICAtIHJvbGU6IHNlcnZpY2UKICAgICAgbmFtZXNwYWNlczoKICAgICAgICBuYW1lczoKICAgICAgICAgIC0gb3BlbnNoaWZ0LW1vbml0b3JpbmcKICBzY3JhcGVfaW50ZXJ2YWw6IDEyMHMKICBzY3JhcGVfdGltZW91dDogNjBzCiAgbWV0cmljc19wYXRoOiAvZmVkZXJhdGUKICByZWxhYmVsX2NvbmZpZ3M6CiAgICAtIGFjdGlvbjoga2VlcAogICAgICBzb3VyY2VfbGFiZWxzOiBbICdfX21ldGFfa3ViZXJuZXRlc19zZXJ2aWNlX25hbWUnIF0KICAgICAgcmVnZXg6IHByb21ldGhldXMtazhzCiAgICAtIGFjdGlvbjoga2VlcAogICAgICBzb3VyY2VfbGFiZWxzOiBbICdfX21ldGFfa3ViZXJuZXRlc19zZXJ2aWNlX3BvcnRfbmFtZScgXQogICAgICByZWdleDogd2ViCiAgcGFyYW1zOgogICAgbWF0Y2hbXTogWydrdWJlbGV0X3ZvbHVtZV9zdGF0c191c2VkX2J5dGVze2VuZHBvaW50PSJodHRwcy1tZXRyaWNzIixuYW1lc3BhY2U9fiJyZWRoYXQtcmhvYW0tLioifScsJ2t1YmVsZXRfdm9sdW1lX3N0YXRzX2F2YWlsYWJsZV9ieXRlc3tlbmRwb2ludD0iaHR0cHMtbWV0cmljcyIsbmFtZXNwYWNlPX4icmVkaGF0LXJob2FtLS4qIn0nLCdrdWJlbGV0X3ZvbHVtZV9zdGF0c19jYXBhY2l0eV9ieXRlc3tlbmRwb2ludD0iaHR0cHMtbWV0cmljcyIsbmFtZXNwYWNlPX4icmVkaGF0LXJob2FtLS4qIn0nLCdoYXByb3h5X2JhY2tlbmRfaHR0cF9yZXNwb25zZXNfdG90YWx7cm91dGU9fiJea2V5Y2xvYWsuKiIsZXhwb3J0ZWRfbmFtZXNwYWNlPX4icmVkaGF0LXJob2FtLS4qc3NvJCJ9JywneyBzZXJ2aWNlPSJrdWJlLXN0YXRlLW1ldHJpY3MiIH0nLCd7IHNlcnZpY2U9Im5vZGUtZXhwb3J0ZXIiIH0nLCd7IF9fbmFtZV9fPX4ibm9kZV9uYW1lc3BhY2VfcG9kX2NvbnRhaW5lcjouKiIgfScsJ3sgX19uYW1lX189fiJub2RlOi4qIiB9JywneyBfX25hbWVfXz1+Imluc3RhbmNlOi4qIiB9JywneyBfX25hbWVfXz1+ImNvbnRhaW5lcl9tZW1vcnlfLioiIH0nLCd7IF9fbmFtZV9fPX4iOm5vZGVfbWVtb3J5Xy4qIiB9JywneyBfX25hbWVfXz1+ImNzdl8uKiIgfSddCiAgc2NoZW1lOiBodHRwcwogIGJlYXJlcl90b2tlbl9maWxlOiAiL3Zhci9ydW4vc2VjcmV0cy9rdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3Rva2VuIgogIHRsc19jb25maWc6CiAgICBpbnNlY3VyZV9za2lwX3ZlcmlmeTogdHJ1ZQotIGpvYl9uYW1lOiBwcm9tZXRoZXVzLXNlbGYKICBob25vcl9sYWJlbHM6IHRydWUKICByZWxhYmVsX2NvbmZpZ3M6CiAgLSBhY3Rpb246IGtlZXAKICAgIHNvdXJjZV9sYWJlbHM6CiAgICAtIF9fbWV0YV9rdWJlcm5ldGVzX3NlcnZpY2VfbGFiZWxfYXBwX2t1YmVybmV0ZXNfaW9fbmFtZQogICAgcmVnZXg6IHJob2FtLXByb21ldGhldXMKICAtIGFjdGlvbjoga2VlcAogICAgc291cmNlX2xhYmVsczoKICAgIC0gX19tZXRhX2t1YmVybmV0ZXNfZW5kcG9pbnRfcG9ydF9uYW1lCiAgICByZWdleDogd2ViCiAgLSBzb3VyY2VfbGFiZWxzOgogICAgLSBfX21ldGFfa3ViZXJuZXRlc19uYW1lc3BhY2UKICAgIHRhcmdldF9sYWJlbDogbmFtZXNwYWNlCiAgLSBzb3VyY2VfbGFiZWxzOgogICAgLSBfX21ldGFfa3ViZXJuZXRlc19zZXJ2aWNlX25hbWUKICAgIHRhcmdldF9sYWJlbDogc2VydmljZQogIC0gc291cmNlX2xhYmVsczoKICAgIC0gX19tZXRhX2t1YmVybmV0ZXNfcG9kX25hbWUKICAgIHRhcmdldF9sYWJlbDogcG9kCiAgLSBzb3VyY2VfbGFiZWxzOgogICAgLSBfX21ldGFfa3ViZXJuZXRlc19wb2RfY29udGFpbmVyX25hbWUKICAgIHRhcmdldF9sYWJlbDogY29udGFpbmVyCiAgLSB0YXJnZXRfbGFiZWw6IGVuZHBvaW50CiAgICByZXBsYWNlbWVudDogd2ViCiAga3ViZXJuZXRlc19zZF9jb25maWdzOgogIC0gcm9sZTogZW5kcG9pbnRzCiAgICBuYW1lc3BhY2VzOgogICAgICBuYW1lczoKICAgICAgLSByZWRoYXQtcmhvYW0tb3BlcmF0b3IKLSBqb2JfbmFtZTogYWxlcnRtYW5hZ2VyLXNlbGYKICBob25vcl90aW1lc3RhbXBzOiB0cnVlCiAgc2NyYXBlX2ludGVydmFsOiAzMHMKICBzY3JhcGVfdGltZW91dDogMTBzCiAgbWV0cmljc19wYXRoOiAvbWV0cmljcwogIHNjaGVtZTogaHR0cAogIGZvbGxvd19yZWRpcmVjdHM6IHRydWUKICByZWxhYmVsX2NvbmZpZ3M6CiAgLSBzb3VyY2VfbGFiZWxzOgogICAgLSBfX21ldGFfa3ViZXJuZXRlc19zZXJ2aWNlX2xhYmVsX2FwcF9rdWJlcm5ldGVzX2lvX25hbWUKICAgIHNlcGFyYXRvcjogOwogICAgcmVnZXg6IHJob2FtLWFsZXJ0bWFuYWdlcgogICAgcmVwbGFjZW1lbnQ6ICQxCiAgICBhY3Rpb246IGtlZXAKICAtIHNvdXJjZV9sYWJlbHM6IFtfX21ldGFfa3ViZXJuZXRlc19lbmRwb2ludF9wb3J0X25hbWVdCiAgICBzZXBhcmF0b3I6IDsKICAgIHJlZ2V4OiB3ZWIKICAgIHJlcGxhY2VtZW50OiAkMQogICAgYWN0aW9uOiBrZWVwCiAgLSBzb3VyY2VfbGFiZWxzOiBbX19tZXRhX2t1YmVybmV0ZXNfbmFtZXNwYWNlXQogICAgc2VwYXJhdG9yOiA7CiAgICByZWdleDogKC4qKQogICAgdGFyZ2V0X2xhYmVsOiBuYW1lc3BhY2UKICAgIHJlcGxhY2VtZW50OiAkMQogICAgYWN0aW9uOiByZXBsYWNlCiAgLSBzb3VyY2VfbGFiZWxzOiBbX19tZXRhX2t1YmVybmV0ZXNfc2VydmljZV9uYW1lXQogICAgc2VwYXJhdG9yOiA7CiAgICByZWdleDogKC4qKQogICAgdGFyZ2V0X2xhYmVsOiBzZXJ2aWNlCiAgICByZXBsYWNlbWVudDogJDEKICAgIGFjdGlvbjogcmVwbGFjZQogIC0gc291cmNlX2xhYmVsczogW19fbWV0YV9rdWJlcm5ldGVzX3BvZF9uYW1lXQogICAgc2VwYXJhdG9yOiA7CiAgICByZWdleDogKC4qKQogICAgdGFyZ2V0X2xhYmVsOiBwb2QKICAgIHJlcGxhY2VtZW50OiAkMQogICAgYWN0aW9uOiByZXBsYWNlCiAgLSBzb3VyY2VfbGFiZWxzOiBbX19tZXRhX2t1YmVybmV0ZXNfcG9kX2NvbnRhaW5lcl9uYW1lXQogICAgc2VwYXJhdG9yOiA7CiAgICByZWdleDogKC4qKQogICAgdGFyZ2V0X2xhYmVsOiBjb250YWluZXIKICAgIHJlcGxhY2VtZW50OiAkMQogICAgYWN0aW9uOiByZXBsYWNlCiAgLSBzZXBhcmF0b3I6IDsKICAgIHJlZ2V4OiAoLiopCiAgICB0YXJnZXRfbGFiZWw6IGVuZHBvaW50CiAgICByZXBsYWNlbWVudDogd2ViCiAgICBhY3Rpb246IHJlcGxhY2UKICBrdWJlcm5ldGVzX3NkX2NvbmZpZ3M6CiAgLSByb2xlOiBlbmRwb2ludHMKICAgIGt1YmVjb25maWdfZmlsZTogIiIKICAgIGZvbGxvd19yZWRpcmVjdHM6IHRydWUKICAgIG5hbWVzcGFjZXM6CiAgICAgIG5hbWVzOgogICAgICAtIHJlZGhhdC1yaG9hbS1vcGVyYXRvcg==
type: Opaque
---
kind: Secret
apiVersion: v1
metadata:
  name: alertmanager-rhoam
  namespace: redhat-rhoam-operator
  annotations:
    integreatly-name: rhoam
    integreatly-namespace: redhat-rhoam-operator
data:
  alertmanager-email-config.tmpl: >-
    
  alertmanager.yaml: >-
    Z2xvYmFsOgogIHJlc29sdmVfdGltZW91dDogNW0KICBzbXRwX3NtYXJ0aG9zdDogc210cC5leGFtcGxlLmNvbTo1ODcKICBzbXRwX2Zyb206IGRlZmF1bHRAdGVzdC5jb20KICBzbXRwX2F1dGhfdXNlcm5hbWU6IHNtdHBfdXNlcm5hbWUKICBzbXRwX2F1dGhfcGFzc3dvcmQ6IHNtdHBfcGFzc3dvcmQKCnRlbXBsYXRlczoKICAtIC9ldGMvYWxlcnRtYW5hZ2VyL2NvbmZpZy9hbGVydG1hbmFnZXItZW1haWwtY29uZmlnLnRtcGwKCnJvdXRlOgogIGdyb3VwX3dhaXQ6IDMwcwogIGdyb3VwX2ludGVydmFsOiA1bQogIHJlcGVhdF9pbnRlcnZhbDogMTJoCiAgcmVjZWl2ZXI6IGRlZmF1bHQKICByb3V0ZXM6CiAgICAtIG1hdGNoOgogICAgICAgIHNldmVyaXR5OiBjcml0aWNhbAogICAgICByZWNlaXZlcjogY3JpdGljYWwKICAgIC0gbWF0Y2g6CiAgICAgICAgc2V2ZXJpdHk6IGluZm8KICAgICAgcmVjZWl2ZXI6IGJsYWNraG9sZQogICAgLSBtYXRjaDoKICAgICAgICBhbGVydG5hbWU6IERlYWRNYW5zU3dpdGNoCiAgICAgIHJlcGVhdF9pbnRlcnZhbDogNW0KICAgICAgcmVjZWl2ZXI6IGRlYWRtYW5zc3dpdGNoCiAgICAtIG1hdGNoOgogICAgICAgIGFsZXJ0bmFtZTogUkhPQU1BcGlVc2FnZUxldmVsMVRocmVzaG9sZEV4Y2VlZGVkCiAgICAgIHJlY2VpdmVyOiBCVWFuZEN1c3RvbWVyCiAgICAtIG1hdGNoOgogICAgICAgIGFsZXJ0bmFtZTogUkhPQU1BcGlVc2FnZUxldmVsMlRocmVzaG9sZEV4Y2VlZGVkCiAgICAgIHJlY2VpdmVyOiBCVWFuZEN1c3RvbWVyCiAgICAtIG1hdGNoOgogICAgICAgIGFsZXJ0bmFtZTogUkhPQU1BcGlVc2FnZUxldmVsM1RocmVzaG9sZEV4Y2VlZGVkCiAgICAgIHJlY2VpdmVyOiBCVWFuZEN1c3RvbWVyCiAgICAtIG1hdGNoX3JlOgogICAgICAgIGFsZXJ0bmFtZTogUkhPQU1BcGlVc2FnZVNvZnRMaW1pdFJlYWNoZWRUaWVyWzAtOV0rCiAgICAgIHJlY2VpdmVyOiBCVQogICAgLSBtYXRjaDoKICAgICAgICBhbGVydG5hbWU6IFJIT0FNQXBpVXNhZ2VPdmVyTGltaXQKICAgICAgcmVjZWl2ZXI6IEJVYW5kQ3VzdG9tZXIKICAgIC0gbWF0Y2g6CiAgICAgICAgYWxlcnRuYW1lOiBSSE9BTUFwaVVzYWdlUmVqZWN0ZWRSZXF1ZXN0c01pc21hdGNoCiAgICAgIHJlY2VpdmVyOiBCVWFuZEN1c3RvbWVyCiAgICAtIG1hdGNoOgogICAgICAgIGFsZXJ0bmFtZTogQ3VzdG9tRG9tYWluQ1JFcnJvclN0YXRlCiAgICAgIHJlY2VpdmVyOiBTUkVDdXN0b21lckJVCnJlY2VpdmVyczoKICAtIG5hbWU6IGJsYWNraG9sZQogIC0gbmFtZTogZGVmYXVsdAogICAgZW1haWxfY29uZmlnczoKICAgICAgLSBzZW5kX3Jlc29sdmVkOiB0cnVlCiAgICAgICAgdG86IG5vcmVwbHlAYWxlcnRtYW5hZ2VyLXJlZGhhdC1yaG9hbS1vcGVyYXRvci5hcHBzLmNreXJpbGxvLmJ6bm8uczEuZGV2c2hpZnQub3JnCiAgICAgICAgaGVhZGVyczoKICAgICAgICAgIFN1YmplY3Q6ICd7e3RlbXBsYXRlICJlbWFpbC5pbnRlZ3JlYXRseS5zdWJqZWN0IiAuIH19JwogICAgICAgIGh0bWw6ICd7eyB0ZW1wbGF0ZSAiZW1haWwuaW50ZWdyZWF0bHkuaHRtbCIgLiB9fScKICAtIG5hbWU6IGNyaXRpY2FsCiAgICBwYWdlcmR1dHlfY29uZmlnczoKICAgICAgLSBzZXJ2aWNlX2tleTogdGVzdAogICAgICAgIGRlc2NyaXB0aW9uOiAne3t0ZW1wbGF0ZSAiZW1haWwuaW50ZWdyZWF0bHkuc3ViamVjdCIgLiB9fScKICAgICAgICBkZXRhaWxzOgogICAgICAgICAgY2x1c3Rlcl9uYW1lOiBja3lyaWxsby02c2R4cAogICAgICAgICAgY2x1c3Rlcl9JRDogYjNjOWZiMDAtZjE0ZC00ZTA0LWIyYmYtZTJiMTQxZTMwZDNiCiAgICAgICAgICBjb25zb2xlOiBodHRwczovL2NvbnNvbGUtb3BlbnNoaWZ0LWNvbnNvbGUuYXBwcy5ja3lyaWxsby5iem5vLnMxLmRldnNoaWZ0Lm9yZwogICAgZW1haWxfY29uZmlnczoKICAgICAgLSBzZW5kX3Jlc29sdmVkOiB0cnVlCiAgICAgICAgdG86IG5vcmVwbHlAYWxlcnRtYW5hZ2VyLXJlZGhhdC1yaG9hbS1vcGVyYXRvci5hcHBzLmNreXJpbGxvLmJ6bm8uczEuZGV2c2hpZnQub3JnCiAgICAgICAgaGVhZGVyczoKICAgICAgICAgIFN1YmplY3Q6ICd7e3RlbXBsYXRlICJlbWFpbC5pbnRlZ3JlYXRseS5zdWJqZWN0IiAuIH19JwogICAgICAgIGh0bWw6ICd7eyB0ZW1wbGF0ZSAiZW1haWwuaW50ZWdyZWF0bHkuaHRtbCIgLiB9fScKICAtIG5hbWU6IGRlYWRtYW5zc3dpdGNoCiAgICB3ZWJob29rX2NvbmZpZ3M6CiAgICAgIC0gdXJsOiBodHRwczovL2Rtcy5leGFtcGxlLmNvbQogIC0gbmFtZTogQlUKICAgIGVtYWlsX2NvbmZpZ3M6CiAgICAgIC0gc2VuZF9yZXNvbHZlZDogVHJ1ZQogICAgICAgIHRvOiAnbm9yZXBseUBhbGVydG1hbmFnZXItcmVkaGF0LXJob2FtLW9wZXJhdG9yLmFwcHMuY2t5cmlsbG8uYnpuby5zMS5kZXZzaGlmdC5vcmcnCiAgICAgICAgaGVhZGVyczoKICAgICAgICAgIFN1YmplY3Q6ICd7e3RlbXBsYXRlICJlbWFpbC5pbnRlZ3JlYXRseS5zdWJqZWN0IiAuIH19JwogICAgICAgIGh0bWw6ICd7eyB0ZW1wbGF0ZSAiZW1haWwuaW50ZWdyZWF0bHkuaHRtbCIgLiB9fScKICAtIG5hbWU6IEJVYW5kQ3VzdG9tZXIKICAgIGVtYWlsX2NvbmZpZ3M6CiAgICAgIC0gc2VuZF9yZXNvbHZlZDogVHJ1ZQogICAgICAgIHRvOiAnbm9yZXBseUBhbGVydG1hbmFnZXItcmVkaGF0LXJob2FtLW9wZXJhdG9yLmFwcHMuY2t5cmlsbG8uYnpuby5zMS5kZXZzaGlmdC5vcmcsIG5vcmVwbHlAYWxlcnRtYW5hZ2VyLXJlZGhhdC1yaG9hbS1vcGVyYXRvci5hcHBzLmNreXJpbGxvLmJ6bm8uczEuZGV2c2hpZnQub3JnJwogICAgICAgIGhlYWRlcnM6CiAgICAgICAgICBTdWJqZWN0OiAne3t0ZW1wbGF0ZSAiZW1haWwuaW50ZWdyZWF0bHkuc3ViamVjdCIgLiB9fScKICAgICAgICBodG1sOiAne3sgdGVtcGxhdGUgImVtYWlsLmludGVncmVhdGx5Lmh0bWwiIC4gfX0nCiAgLSBuYW1lOiBTUkVDdXN0b21lckJVCiAgICBlbWFpbF9jb25maWdzOgogICAgICAtIHNlbmRfcmVzb2x2ZWQ6IFRydWUKICAgICAgICB0bzogJ25vcmVwbHlAYWxlcnRtYW5hZ2VyLXJlZGhhdC1yaG9hbS1vcGVyYXRvci5hcHBzLmNreXJpbGxvLmJ6bm8uczEuZGV2c2hpZnQub3JnLCBub3JlcGx5QGFsZXJ0bWFuYWdlci1yZWRoYXQtcmhvYW0tb3BlcmF0b3IuYXBwcy5ja3lyaWxsby5iem5vLnMxLmRldnNoaWZ0Lm9yZywgbm9yZXBseUBhbGVydG1hbmFnZXItcmVkaGF0LXJob2FtLW9wZXJhdG9yLmFwcHMuY2t5cmlsbG8uYnpuby5zMS5kZXZzaGlmdC5vcmcnCiAgICAgICAgaGVhZGVyczoKICAgICAgICAgIFN1YmplY3Q6ICd7e3RlbXBsYXRlICJlbWFpbC5pbnRlZ3JlYXRseS5zdWJqZWN0IiAuIH19JwogICAgICAgIGh0bWw6ICd7eyB0ZW1wbGF0ZSAiZW1haWwuaW50ZWdyZWF0bHkuaHRtbCIgLiB9fScKaW5oaWJpdF9ydWxlczoKICAtIHNvdXJjZV9tYXRjaDoKICAgICAgYWxlcnRuYW1lOiAnSm9iUnVubmluZ1RpbWVFeGNlZWRlZCcKICAgICAgc2V2ZXJpdHk6ICd3YXJuaW5nJwogICAgdGFyZ2V0X21hdGNoOgogICAgICBhbGVydG5hbWU6ICdKb2JSdW5uaW5nVGltZUV4Y2VlZGVkJwogICAgICBzZXZlcml0eTogJ3dhcm5pbmcnCiAgICBlcXVhbDogWydhbGVydG5hbWUnLCAnam9iJywgJ2xhYmVsX2Nyb25qb2JfbmFtZSddCg==
type: Opaque
---
kind: MonitoringStack
apiVersion: monitoring.rhobs/v1alpha1
metadata:
  name: rhoam
  namespace: redhat-rhoam-operator
spec:
  alertmanagerConfig:
    disabled: false
  namespaceSelector:
    matchExpressions:
      - key: monitoring-key
        operator: In
        values:
          - middleware
  prometheusConfig:
    persistentVolumeClaim:
      resources:
        requests:
          storage: 10Gi
    replicas: 1
  resourceSelector: {}
  resources:
    requests:
      memory: 400Mi
  retention: 45d